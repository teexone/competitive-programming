#include <bits/stdc++.h>
using namespace std;
void heap_it(vector<int> &a, int size, int v)
{
    int largest = v;
    int left = v * 2 + 1;
    int right = v * 2 + 2;
    if(left < size && a[left] > a[largest])
        largest = left;
    if(right < size && a[right] > a[largest])
        largest = right;
    if(largest != v)
    {
        swap(a[largest], a[v]);
        heap_it(a, size, largest);
    }

}
void heap_sort(vector<int> &a)
{
    for(int i = a.size() / 2 - 1; i >= 0; i--)
        heap_it(a, a.size(), i);
    for(int i = (int)a.size() - 1; i >= 0; i--)
    {
        swap(a[0], a[i]);
        heap_it(a, i, 0);
    }

}
vector<int> merge(vector<int> x, vector<int> y)
{
    vector<int> merged{};
    for(int i = 0, j = 0; i < x.size() || j < y.size();)
    {
        if(i == x.size() || (y[j] < x[i] && j < y.size())) merged.push_back(y[j++]);
        else if(j == y.size() || (x[i] <= y[j] && i < x.size())) merged.push_back(x[i++]);
    }
    cout << merged;
    return merged;
}
vector<int> __merge_sort(vector<int> a, int l = -1, int r = -1)
{
    if(l == -1 || r == -1) { l = 0; r = a.size() - 1; }
    if(l == r) return vector<int>{a[l]};
    int mid = (r + l)/2;
    auto x = __merge_sort(a, l, mid);
    auto y = __merge_sort(a, mid + 1, r);
    return merge(x, y);

}
void merge_sort(vector<int> &a)
{
    a = __merge_sort(a);
}
int divide(vector<int> &a, int less, int more)
{
    int j = less - 1;
    int anchor = a[more];
    for(int i = less; i + 1 <= more; ++i)
    {
        if(a[i] < anchor)
            swap(a[i], a[++j]);
    }
    swap(a[j + 1], a[more]);
    return j + 1;
}
void quick_sort(vector<int> &a, int less = -1, int more = -1)
{
    if(less == -1 || more == -1) { less = 0; more = a.size() - 1; }
    if(less < more)
    {
        int div = divide(a, less, more);
        quick_sort(a, less, div - 1);
        quick_sort(a, div + 1, more);
    }

}
int main() {
    vector<int> a1{4, 3, 5, 10, 1}, a2 = a1, a3 = a1;
    quick_sort(a1);
    merge_sort(a2);
    heap_sort(a3);
}
