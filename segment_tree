#include<bits/stdc++.h>
using namespace std;


typedef long long ll;


template <typename T1, typename T2>
void build(int v, int tl, int tr, T1 &m, T2& tree)
{
    if(tl == tr)
        tree[v] = m[tl];
    else
    {
        int tm = (tl + tr)/2;
        build(v*2, tl, tm, m, tree);
        build(v*2+1, tm + 1, tr, m, tree);
        tree[v] = max(tree[v*2], tree[v*2 + 1]);
    }

}


template <typename T>
int ask(int l, int r, int v, int tl, int tr, T& tree) {
    if (l <= tl && tr <= r) {
        return tree[v];
    }
    if (tr < l || r < tl) {
        return 0;
    }
    int tm = (tl + tr) / 2;
    return max(ask(l, r, v * 2, tl, tm, tree), ask(l, r, v * 2 + 1, tm + 1, tr, tree));
}


template <typename T1, typename T2>
void update (int v, int tl, int tr, int pos, T1 new_val, T2 &t) {
    if (tl == tr)
        t[v] = new_val;
    else {
        int tm = (tl + tr) / 2;
        if (pos <= tm)
            update (v*2, tl, tm, pos, new_val, t);
        else
            update (v*2+1, tm+1, tr, pos, new_val, t);
        t[v] = t[v*2] + t[v*2+1];
    }
}


int main()
{
    int n = 10;
    int m = 10;
    vector<int> htree(4 * n, 0);
    vector<int> array(n, 0);
    build(1, 0, n - 1, array, htree);
    ask(0, 5, 1, 0, n - 1, htree);
    update(1, 0, n - 1, 3, 100, htree);

}
